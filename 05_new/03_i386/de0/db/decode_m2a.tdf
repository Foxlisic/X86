--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=16 LPM_WIDTH=4 data eq
--VERSION_BEGIN 17.1 cbx_cycloneii 2017:10:19:05:46:40:SJ cbx_lpm_add_sub 2017:10:19:05:46:40:SJ cbx_lpm_compare 2017:10:19:05:46:40:SJ cbx_lpm_decode 2017:10:19:05:46:40:SJ cbx_mgl 2017:10:19:06:38:12:SJ cbx_nadder 2017:10:19:05:46:40:SJ cbx_stratix 2017:10:19:05:46:40:SJ cbx_stratixii 2017:10:19:05:46:40:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 16 
SUBDESIGN decode_m2a
( 
	data[3..0]	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode1886w[3..0]	: WIRE;
	w_anode1903w[3..0]	: WIRE;
	w_anode1913w[3..0]	: WIRE;
	w_anode1923w[3..0]	: WIRE;
	w_anode1933w[3..0]	: WIRE;
	w_anode1943w[3..0]	: WIRE;
	w_anode1953w[3..0]	: WIRE;
	w_anode1963w[3..0]	: WIRE;
	w_anode1973w[3..0]	: WIRE;
	w_anode1984w[3..0]	: WIRE;
	w_anode1994w[3..0]	: WIRE;
	w_anode2004w[3..0]	: WIRE;
	w_anode2014w[3..0]	: WIRE;
	w_anode2024w[3..0]	: WIRE;
	w_anode2034w[3..0]	: WIRE;
	w_anode2044w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[7..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode1963w[3..3], w_anode1953w[3..3], w_anode1943w[3..3], w_anode1933w[3..3], w_anode1923w[3..3], w_anode1913w[3..3], w_anode1903w[3..3], w_anode1886w[3..3]);
	eq_wire2w[] = ( w_anode2044w[3..3], w_anode2034w[3..3], w_anode2024w[3..3], w_anode2014w[3..3], w_anode2004w[3..3], w_anode1994w[3..3], w_anode1984w[3..3], w_anode1973w[3..3]);
	w_anode1886w[] = ( (w_anode1886w[2..2] & (! data_wire[2..2])), (w_anode1886w[1..1] & (! data_wire[1..1])), (w_anode1886w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1903w[] = ( (w_anode1903w[2..2] & (! data_wire[2..2])), (w_anode1903w[1..1] & (! data_wire[1..1])), (w_anode1903w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1913w[] = ( (w_anode1913w[2..2] & (! data_wire[2..2])), (w_anode1913w[1..1] & data_wire[1..1]), (w_anode1913w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1923w[] = ( (w_anode1923w[2..2] & (! data_wire[2..2])), (w_anode1923w[1..1] & data_wire[1..1]), (w_anode1923w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1933w[] = ( (w_anode1933w[2..2] & data_wire[2..2]), (w_anode1933w[1..1] & (! data_wire[1..1])), (w_anode1933w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1943w[] = ( (w_anode1943w[2..2] & data_wire[2..2]), (w_anode1943w[1..1] & (! data_wire[1..1])), (w_anode1943w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1953w[] = ( (w_anode1953w[2..2] & data_wire[2..2]), (w_anode1953w[1..1] & data_wire[1..1]), (w_anode1953w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1963w[] = ( (w_anode1963w[2..2] & data_wire[2..2]), (w_anode1963w[1..1] & data_wire[1..1]), (w_anode1963w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1973w[] = ( (w_anode1973w[2..2] & (! data_wire[2..2])), (w_anode1973w[1..1] & (! data_wire[1..1])), (w_anode1973w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1984w[] = ( (w_anode1984w[2..2] & (! data_wire[2..2])), (w_anode1984w[1..1] & (! data_wire[1..1])), (w_anode1984w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1994w[] = ( (w_anode1994w[2..2] & (! data_wire[2..2])), (w_anode1994w[1..1] & data_wire[1..1]), (w_anode1994w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode2004w[] = ( (w_anode2004w[2..2] & (! data_wire[2..2])), (w_anode2004w[1..1] & data_wire[1..1]), (w_anode2004w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode2014w[] = ( (w_anode2014w[2..2] & data_wire[2..2]), (w_anode2014w[1..1] & (! data_wire[1..1])), (w_anode2014w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode2024w[] = ( (w_anode2024w[2..2] & data_wire[2..2]), (w_anode2024w[1..1] & (! data_wire[1..1])), (w_anode2024w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode2034w[] = ( (w_anode2034w[2..2] & data_wire[2..2]), (w_anode2034w[1..1] & data_wire[1..1]), (w_anode2034w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode2044w[] = ( (w_anode2044w[2..2] & data_wire[2..2]), (w_anode2044w[1..1] & data_wire[1..1]), (w_anode2044w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
