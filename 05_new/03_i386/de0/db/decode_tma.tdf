--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 17.1 cbx_cycloneii 2017:10:19:05:46:40:SJ cbx_lpm_add_sub 2017:10:19:05:46:40:SJ cbx_lpm_compare 2017:10:19:05:46:40:SJ cbx_lpm_decode 2017:10:19:05:46:40:SJ cbx_mgl 2017:10:19:06:38:12:SJ cbx_nadder 2017:10:19:05:46:40:SJ cbx_stratix 2017:10:19:05:46:40:SJ cbx_stratixii 2017:10:19:05:46:40:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_tma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode1695w[1..0]	: WIRE;
	w_anode1704w[3..0]	: WIRE;
	w_anode1721w[3..0]	: WIRE;
	w_anode1731w[3..0]	: WIRE;
	w_anode1741w[3..0]	: WIRE;
	w_anode1751w[3..0]	: WIRE;
	w_anode1761w[3..0]	: WIRE;
	w_anode1771w[3..0]	: WIRE;
	w_anode1781w[3..0]	: WIRE;
	w_anode1793w[1..0]	: WIRE;
	w_anode1800w[3..0]	: WIRE;
	w_anode1811w[3..0]	: WIRE;
	w_anode1821w[3..0]	: WIRE;
	w_anode1831w[3..0]	: WIRE;
	w_anode1841w[3..0]	: WIRE;
	w_anode1851w[3..0]	: WIRE;
	w_anode1861w[3..0]	: WIRE;
	w_anode1871w[3..0]	: WIRE;
	w_data1693w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode1871w[3..3], w_anode1861w[3..3], w_anode1851w[3..3], w_anode1841w[3..3], w_anode1831w[3..3], w_anode1821w[3..3], w_anode1811w[3..3], w_anode1800w[3..3]), ( w_anode1781w[3..3], w_anode1771w[3..3], w_anode1761w[3..3], w_anode1751w[3..3], w_anode1741w[3..3], w_anode1731w[3..3], w_anode1721w[3..3], w_anode1704w[3..3]));
	w_anode1695w[] = ( (w_anode1695w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode1704w[] = ( (w_anode1704w[2..2] & (! w_data1693w[2..2])), (w_anode1704w[1..1] & (! w_data1693w[1..1])), (w_anode1704w[0..0] & (! w_data1693w[0..0])), w_anode1695w[1..1]);
	w_anode1721w[] = ( (w_anode1721w[2..2] & (! w_data1693w[2..2])), (w_anode1721w[1..1] & (! w_data1693w[1..1])), (w_anode1721w[0..0] & w_data1693w[0..0]), w_anode1695w[1..1]);
	w_anode1731w[] = ( (w_anode1731w[2..2] & (! w_data1693w[2..2])), (w_anode1731w[1..1] & w_data1693w[1..1]), (w_anode1731w[0..0] & (! w_data1693w[0..0])), w_anode1695w[1..1]);
	w_anode1741w[] = ( (w_anode1741w[2..2] & (! w_data1693w[2..2])), (w_anode1741w[1..1] & w_data1693w[1..1]), (w_anode1741w[0..0] & w_data1693w[0..0]), w_anode1695w[1..1]);
	w_anode1751w[] = ( (w_anode1751w[2..2] & w_data1693w[2..2]), (w_anode1751w[1..1] & (! w_data1693w[1..1])), (w_anode1751w[0..0] & (! w_data1693w[0..0])), w_anode1695w[1..1]);
	w_anode1761w[] = ( (w_anode1761w[2..2] & w_data1693w[2..2]), (w_anode1761w[1..1] & (! w_data1693w[1..1])), (w_anode1761w[0..0] & w_data1693w[0..0]), w_anode1695w[1..1]);
	w_anode1771w[] = ( (w_anode1771w[2..2] & w_data1693w[2..2]), (w_anode1771w[1..1] & w_data1693w[1..1]), (w_anode1771w[0..0] & (! w_data1693w[0..0])), w_anode1695w[1..1]);
	w_anode1781w[] = ( (w_anode1781w[2..2] & w_data1693w[2..2]), (w_anode1781w[1..1] & w_data1693w[1..1]), (w_anode1781w[0..0] & w_data1693w[0..0]), w_anode1695w[1..1]);
	w_anode1793w[] = ( (w_anode1793w[0..0] & data_wire[3..3]), enable_wire);
	w_anode1800w[] = ( (w_anode1800w[2..2] & (! w_data1693w[2..2])), (w_anode1800w[1..1] & (! w_data1693w[1..1])), (w_anode1800w[0..0] & (! w_data1693w[0..0])), w_anode1793w[1..1]);
	w_anode1811w[] = ( (w_anode1811w[2..2] & (! w_data1693w[2..2])), (w_anode1811w[1..1] & (! w_data1693w[1..1])), (w_anode1811w[0..0] & w_data1693w[0..0]), w_anode1793w[1..1]);
	w_anode1821w[] = ( (w_anode1821w[2..2] & (! w_data1693w[2..2])), (w_anode1821w[1..1] & w_data1693w[1..1]), (w_anode1821w[0..0] & (! w_data1693w[0..0])), w_anode1793w[1..1]);
	w_anode1831w[] = ( (w_anode1831w[2..2] & (! w_data1693w[2..2])), (w_anode1831w[1..1] & w_data1693w[1..1]), (w_anode1831w[0..0] & w_data1693w[0..0]), w_anode1793w[1..1]);
	w_anode1841w[] = ( (w_anode1841w[2..2] & w_data1693w[2..2]), (w_anode1841w[1..1] & (! w_data1693w[1..1])), (w_anode1841w[0..0] & (! w_data1693w[0..0])), w_anode1793w[1..1]);
	w_anode1851w[] = ( (w_anode1851w[2..2] & w_data1693w[2..2]), (w_anode1851w[1..1] & (! w_data1693w[1..1])), (w_anode1851w[0..0] & w_data1693w[0..0]), w_anode1793w[1..1]);
	w_anode1861w[] = ( (w_anode1861w[2..2] & w_data1693w[2..2]), (w_anode1861w[1..1] & w_data1693w[1..1]), (w_anode1861w[0..0] & (! w_data1693w[0..0])), w_anode1793w[1..1]);
	w_anode1871w[] = ( (w_anode1871w[2..2] & w_data1693w[2..2]), (w_anode1871w[1..1] & w_data1693w[1..1]), (w_anode1871w[0..0] & w_data1693w[0..0]), w_anode1793w[1..1]);
	w_data1693w[2..0] = data_wire[2..0];
END;
--VALID FILE
