// Структура сегмента
struct Tsegment 
{
    dword   base;       // Базовый адрес сегмента
    dword   limit;      // Размер сегмента
    byte    defsize;    // 0-16 bit; 1-32 bit
    byte    cpl;        // Current Privilege Mode
    word    selector;   // Сохраненный селектор
};

// Имена регистров
enum RegNames 
{
    EAX = 0, ESP = 4, ES = 0, FS = 4,
    ECX = 1, EBP = 5, CS = 1, GS = 5,
    EDX = 2, ESI = 6, SS = 2,
    EBX = 3, EDI = 7, DS = 3 
};

enum Exceptions
{
    EXCEPTION_INVALID_OPCODE    = 0x06,
    EXCEPTION_INVALID_TSS       = 0x0A,
    EXCEPTION_NOT_PRESENT       = 0x0B,
    EXCEPTION_STACK_SEGMENT     = 0x0C,
    EXCEPTION_GENERAL           = 0x0D
};

enum FlagsPosition {
    
    C_FLAG  = 0x0001,
    P_FLAG  = 0x0004,
    A_FLAG  = 0x0010,
    Z_FLAG  = 0x0040,
    N_FLAG  = 0x0080,   // Флаг знака
    T_FLAG  = 0x0100,
    I_FLAG  = 0x0200,
    D_FLAG  = 0x0400,
    V_FLAG  = 0x0800    // Флаг переполнения
};

// Состояние процессора
word    opcode;
dword   regs[8];            // 32-х битные регистры
struct  Tsegment segs[8];   // 6 сегментов
dword   eip;                // Указатель текущего адреса выполнения инструкии
dword   eflags;             // 32-х битные флаги
byte    pmode;              // =1 Защищенный режим работы
byte    exception;          // >0 Во время исполнения инструкции возникла ошибка

// Прегенерированные таблицы
byte    parity[256];

// Состояние инструкции
Tsegment*   segment;
byte        opsize, adsize;
byte        seg_override;
byte        mod_reg, mod_rm, mod_mm;
dword       mod_ea;

// -----------------------------------------------------------------------------
void    cpu_reset();
void    load_segment(byte segment_id, word selector);
void    step();

// Чтение и запись в память
dword   read_address(struct segment* seg, dword offset);
byte    read_byte   (Tsegment* seg, dword offset);
word    read_word   (Tsegment* seg, dword offset);
dword   read_dword  (Tsegment* seg, dword offset);
void    write_byte  (Tsegment* seg, dword offset, byte data);
void    write_word  (Tsegment* seg, dword offset, word data);
void    write_dword (Tsegment* seg, dword offset, dword data);

// Считывание immediate
byte    fetch();
word    fetch_word();
dword   fetch_dword();

// Считывание modrm
void    fetch_modrm();
void    fetch_modrm16();
void    fetch_modrm32();

// Работа с modrm reg
byte    get_regb(byte reg_id);
void    put_regb(byte reg_id, byte data);
dword   get_regw(byte reg_id);
void    put_regw(byte reg_id, dword data);

// Работа с modrm r/m
byte    get_eb();
dword   get_ew();
byte    get_rb();
dword   get_rw();
void    put_eb(byte data);
void    put_ew(dword data);

// Установка и получение флагов
void    set_carry  (byte v);
void    set_over   (byte v);
void    set_zero   (byte v);
void    set_sign   (byte v);
void    set_aux    (byte v);
void    set_parity (byte v);

// Арифметическо-логическое устройство
byte    add8(byte a, byte b);