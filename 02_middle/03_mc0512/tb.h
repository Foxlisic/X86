#include <SDL2/SDL.h>

#include <stdlib.h>
#include <stdio.h>

const static int font[4096] = {
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 00
    0x00,0x00,0x7e,0x81,0xa5,0xa5,0xa5,0x81,0x81,0xbd,0x99,0x81,0x7e,0x00,0x00,0x00, // 01
    0x00,0x00,0x7e,0xff,0xdb,0xdb,0xdb,0xff,0xff,0xc3,0xe7,0xff,0x7e,0x00,0x00,0x00, // 02
    0x00,0x00,0x6c,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0x7c,0x38,0x10,0x00,0x00,0x00,0x00, // 03
    0x00,0x00,0x00,0x00,0x10,0x38,0x7c,0xfe,0x7c,0x38,0x10,0x00,0x00,0x00,0x00,0x00, // 04
    0x00,0x00,0x00,0x18,0x3c,0x3c,0xe7,0xe7,0xe7,0x18,0x18,0x3c,0x00,0x00,0x00,0x00, // 05
    0x00,0x00,0x00,0x18,0x3c,0x7e,0xff,0xff,0x7e,0x18,0x18,0x3c,0x00,0x00,0x00,0x00, // 06
    0x00,0x00,0x00,0x00,0x00,0x18,0x3c,0x3c,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 07
    0xff,0xff,0xff,0xff,0xff,0xff,0xe7,0xc3,0xc3,0xe7,0xff,0xff,0xff,0xff,0xff,0xff, // 08
    0x00,0x00,0x00,0x00,0x00,0x3c,0x66,0x42,0x42,0x66,0x3c,0x00,0x00,0x00,0x00,0x00, // 09
    0xff,0xff,0xff,0xff,0xc3,0x99,0xbd,0xbd,0x99,0xc3,0xff,0xff,0xff,0xff,0xff,0xff, // 0A
    0x00,0x00,0x00,0x1e,0x0e,0x1a,0x32,0x78,0xcc,0xcc,0xcc,0x78,0x00,0x00,0x00,0x00, // 0B
    0x00,0x00,0x00,0x3c,0x66,0x66,0x66,0x3c,0x18,0x7e,0x18,0x18,0x00,0x00,0x00,0x00, // 0C
    0x00,0x00,0x00,0x3f,0x33,0x3f,0x30,0x30,0x30,0x70,0xf0,0xe0,0x00,0x00,0x00,0x00, // 0D
    0x00,0x00,0x00,0x7f,0x63,0x7f,0x63,0x63,0x63,0x67,0xe7,0xe6,0xc0,0x00,0x00,0x00, // 0E
    0x00,0x00,0x00,0x18,0x18,0xdb,0x3c,0xe7,0x3c,0xdb,0x18,0x18,0x00,0x00,0x00,0x00, // 0F
    0x00,0x00,0x00,0x80,0xc0,0xe0,0xf8,0xfe,0xf8,0xe0,0xc0,0x80,0x00,0x00,0x00,0x00, // 10
    0x00,0x00,0x00,0x02,0x06,0x0e,0x3e,0xfe,0x3e,0x0e,0x06,0x02,0x00,0x00,0x00,0x00, // 11
    0x00,0x00,0x00,0x18,0x3c,0x7e,0x18,0x18,0x18,0x18,0x18,0x18,0x7e,0x3c,0x18,0x00, // 12
    0x00,0x00,0x00,0x66,0x66,0x66,0x66,0x66,0x66,0x00,0x66,0x66,0x00,0x00,0x00,0x00, // 13
    0x00,0x00,0x00,0x7f,0xdb,0xdb,0xdb,0x7b,0x1b,0x1b,0x1b,0x1b,0x00,0x00,0x00,0x00, // 14
    0x00,0x00,0x7c,0xc6,0x60,0x38,0x6c,0xc6,0xc6,0x6c,0x38,0x0c,0xc6,0x7c,0x00,0x00, // 15
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xfe,0xfe,0x00,0x00,0x00,0x00, // 16
    0x00,0x00,0x00,0x18,0x3c,0x7e,0x18,0x18,0x18,0x7e,0x3c,0x18,0x7e,0x00,0x00,0x00, // 17
    0x00,0x00,0x00,0x18,0x3c,0x7e,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00, // 18
    0x00,0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x7e,0x3c,0x18,0x00, // 19
    0x00,0x00,0x00,0x00,0x00,0x18,0x0c,0xfe,0x0c,0x18,0x00,0x00,0x00,0x00,0x00,0x00, // 1A
    0x00,0x00,0x00,0x00,0x00,0x30,0x60,0xfe,0x60,0x30,0x00,0x00,0x00,0x00,0x00,0x00, // 1B
    0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xc0,0xc0,0xfe,0x00,0x00,0x00,0x00,0x00,0x00, // 1C
    0x00,0x00,0x00,0x00,0x00,0x28,0x6c,0xfe,0x6c,0x28,0x00,0x00,0x00,0x00,0x00,0x00, // 1D
    0x00,0x00,0x00,0x00,0x10,0x38,0x38,0x7c,0x7c,0xfe,0xfe,0x00,0x00,0x00,0x00,0x00, // 1E
    0x00,0x00,0x00,0xfe,0x7c,0x38,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 1F
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 20
    0x00,0x00,0x18,0x3c,0x3c,0x3c,0x3c,0x18,0x18,0x18,0x00,0x00,0x18,0x00,0x00,0x00, // 21 !
    0x00,0x66,0x66,0x66,0x66,0x66,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 22 "
    0x00,0x00,0x6c,0x6c,0x6c,0xfe,0x6c,0x6c,0x6c,0xfe,0x6c,0x6c,0x6c,0x00,0x00,0x00, // 23 #
    // 0x18,0x18,0x18,0x7c,0xc6,0xc2,0xc0,0x7c,0x06,0x86,0xc6,0x7c,0x18,0x18,0x18,0x00, // 24 $
    0x00,0x00,0x00,0x00,0x66,0x3c,0x66,0x66,0x66,0x66,0x3c,0x66,0x00,0x00,0x00,0x00, // 25 $
    0x00,0x00,0x00,0x00,0x00,0xc2,0xc6,0x0c,0x18,0x30,0x66,0xc6,0x00,0x00,0x00,0x00, // 25 %
    0x00,0x00,0x38,0x6c,0x6c,0x6c,0x38,0x76,0xdc,0xcc,0xcc,0xcc,0x76,0x00,0x00,0x00, // 26 &
    0x00,0x30,0x30,0x30,0x30,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 27 '
    0x00,0x00,0x0c,0x18,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x18,0x0c,0x00,0x00,0x00, // 28 (
    0x00,0x00,0x30,0x18,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x18,0x30,0x00,0x00,0x00, // 29 )
    0x00,0x00,0x00,0x00,0x66,0x66,0x3c,0xff,0x3c,0x66,0x66,0x00,0x00,0x00,0x00,0x00, // 2A *
    0x00,0x00,0x00,0x00,0x18,0x18,0x18,0x7e,0x18,0x18,0x18,0x00,0x00,0x00,0x00,0x00, // 2B +
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x18,0x18,0x30,0x00,0x00, // 2C ,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 2D -
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00, // 2E .
    0x00,0x00,0x00,0x02,0x06,0x0c,0x18,0x30,0x60,0xc0,0x80,0x00,0x00,0x00,0x00,0x00, // 2F /
    0x00,0x00,0x7c,0xc6,0xc6,0xce,0xde,0xf6,0xf6,0xe6,0xc6,0xc6,0x7c,0x00,0x00,0x00, // 30 0
    0x00,0x00,0x18,0x18,0x38,0x78,0x18,0x18,0x18,0x18,0x18,0x18,0x7e,0x00,0x00,0x00, // 31 1
    0x00,0x00,0x7c,0xc6,0xc6,0x06,0x06,0x0c,0x18,0x30,0x60,0xc6,0xfe,0x00,0x00,0x00, // 32 2
    0x00,0x00,0x7c,0xc6,0x06,0x06,0x06,0x3c,0x06,0x06,0x06,0xc6,0x7c,0x00,0x00,0x00, // 33 3
    0x00,0x00,0x0c,0x1c,0x3c,0x6c,0xcc,0xcc,0xfe,0x0c,0x0c,0x0c,0x1e,0x00,0x00,0x00, // 34 4
    0x00,0x00,0xfe,0xc0,0xc0,0xc0,0xfc,0x06,0x06,0x06,0x06,0xc6,0x7c,0x00,0x00,0x00, // 35 5
    0x00,0x00,0x38,0x60,0xc0,0xc0,0xfc,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00, // 36 6
    0x00,0x00,0xfe,0xc6,0xc6,0x06,0x06,0x0c,0x18,0x30,0x30,0x30,0x30,0x00,0x00,0x00, // 37 7
    0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0x7c,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00, // 38 8
    0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0x7e,0x06,0x06,0x0c,0x78,0x00,0x00,0x00, // 39 9
    0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00, // 3A :
    0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x18,0x18,0x18,0x18,0x30,0x00,0x00, // 3B ;
    0x00,0x00,0x00,0x06,0x0c,0x18,0x30,0x60,0x30,0x18,0x0c,0x06,0x00,0x00,0x00,0x00, // 3C <
    0x00,0x00,0x00,0x00,0x00,0x00,0x7e,0x00,0x00,0x7e,0x00,0x00,0x00,0x00,0x00,0x00, // 3D =
    0x00,0x00,0x00,0x60,0x30,0x18,0x0c,0x06,0x0c,0x18,0x30,0x60,0x00,0x00,0x00,0x00, // 3E >
    0x00,0x00,0x7c,0xc6,0xc6,0xc6,0x0c,0x18,0x18,0x18,0x00,0x18,0x18,0x00,0x00,0x00, // 3F ?
    0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xde,0xde,0xde,0xdc,0xc0,0xc0,0x7c,0x00,0x00,0x00, // 40 @
    0x00,0x00,0x10,0x38,0x6c,0xc6,0xc6,0xc6,0xfe,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00, // 41 A
    0x00,0x00,0xfc,0x66,0x66,0x66,0x66,0x7c,0x66,0x66,0x66,0x66,0xfc,0x00,0x00,0x00, // 42 B
    0x00,0x00,0x7c,0xc6,0xc6,0xc0,0xc0,0xc0,0xc0,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00, // 43 C
    0x00,0x00,0xfc,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0xfc,0x00,0x00,0x00, // 44 D
    0x00,0x00,0xfe,0x66,0x62,0x60,0x68,0x78,0x68,0x68,0x62,0x66,0xfe,0x00,0x00,0x00, // 45 E
    0x00,0x00,0xfe,0x66,0x62,0x60,0x68,0x78,0x68,0x68,0x60,0x60,0xf0,0x00,0x00,0x00, // 46 F
    0x00,0x00,0x7c,0xc6,0xc6,0xc0,0xc0,0xc0,0xde,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00, // 47 G
    0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xfe,0xc6,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00, // 48 H
    0x00,0x00,0x3c,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x3c,0x00,0x00,0x00, // 49 I
    0x00,0x00,0x1e,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0xcc,0xcc,0x78,0x00,0x00,0x00, // 4A J
    0x00,0x00,0xe6,0x66,0x66,0x6c,0x6c,0x78,0x6c,0x6c,0x66,0x66,0xe6,0x00,0x00,0x00, // 4B K
    0x00,0x00,0xf0,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x62,0x66,0xfe,0x00,0x00,0x00, // 4C L
    0x00,0x00,0xc6,0xc6,0xee,0xfe,0xfe,0xd6,0xc6,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00, // 4D M
    0x00,0x00,0xc6,0xc6,0xe6,0xf6,0xfe,0xde,0xce,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00, // 4E N
    0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00, // 4F O
    0x00,0x00,0xfc,0x66,0x66,0x66,0x66,0x66,0x7c,0x60,0x60,0x60,0xf0,0x00,0x00,0x00, // 50 P
    0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xd6,0xde,0x7c,0x0c,0x00,0x00,0x00, // 51 Q
    0x00,0x00,0xfc,0x66,0x66,0x66,0x66,0x7c,0x6c,0x66,0x66,0x66,0xe6,0x00,0x00,0x00, // 52 R
    0x00,0x00,0x7c,0xc6,0xc6,0xc6,0x60,0x38,0x0c,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00, // 53 S
    0x00,0x00,0x7e,0x7e,0x5a,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x3c,0x00,0x00,0x00, // 54 T
    0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00, // 55 U
    0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x6c,0x38,0x10,0x00,0x00,0x00, // 56 V
    0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xd6,0xd6,0xfe,0x7c,0x6c,0x6c,0x00,0x00,0x00, // 57 W
    0x00,0x00,0xc6,0xc6,0xc6,0x6c,0x38,0x38,0x38,0x6c,0xc6,0xc6,0xc6,0x00,0x00,0x00, // 58 X
    0x00,0x00,0x66,0x66,0x66,0x66,0x66,0x3c,0x18,0x18,0x18,0x18,0x3c,0x00,0x00,0x00, // 59 Y
    0x00,0x00,0xfe,0xc6,0xc6,0x8c,0x18,0x30,0x60,0xc2,0xc6,0xc6,0xfe,0x00,0x00,0x00, // 5A Z
    0x00,0x00,0x3c,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x3c,0x00,0x00,0x00, // 5B [
    0x00,0x00,0x00,0x80,0xc0,0xe0,0x70,0x38,0x1c,0x0e,0x06,0x02,0x00,0x00,0x00,0x00, // 5C \ symbol
    0x00,0x00,0x3c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x3c,0x00,0x00,0x00, // 5D ]
    0x10,0x10,0x38,0x6c,0xc6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 5E ^
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00, // 5F _
    0x30,0x30,0x30,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 60 `
    0x00,0x00,0x00,0x00,0x00,0x78,0xcc,0x0c,0x7c,0xcc,0xcc,0xcc,0x76,0x00,0x00,0x00, // 61 a
    0x00,0x00,0xe0,0x60,0x60,0x60,0x78,0x6c,0x66,0x66,0x66,0x66,0x7c,0x00,0x00,0x00, // 62 b
    0x00,0x00,0x00,0x00,0x00,0x7c,0xc6,0xc6,0xc0,0xc0,0xc6,0xc6,0x7c,0x00,0x00,0x00, // 63 c
    0x00,0x00,0x1c,0x0c,0x0c,0x0c,0x3c,0x6c,0xcc,0xcc,0xcc,0xcc,0x76,0x00,0x00,0x00, // 64 d
    0x00,0x00,0x00,0x00,0x00,0x7c,0xc6,0xc6,0xfe,0xc0,0xc6,0xc6,0x7c,0x00,0x00,0x00, // 65 e
    0x00,0x00,0x38,0x6c,0x64,0x60,0xf0,0x60,0x60,0x60,0x60,0x60,0xf0,0x00,0x00,0x00, // 66 f
    0x00,0x00,0x00,0x00,0x00,0x76,0xcc,0xcc,0xcc,0xcc,0xcc,0x7c,0x0c,0xcc,0x78,0x00, // 67 g
    0x00,0x00,0xe0,0x60,0x60,0x6c,0x76,0x66,0x66,0x66,0x66,0x66,0xe6,0x00,0x00,0x00, // 68 h
    0x00,0x00,0x18,0x18,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x18,0x3c,0x00,0x00,0x00, // 69 i
    0x00,0x00,0x06,0x06,0x00,0x0e,0x06,0x06,0x06,0x06,0x06,0x06,0x66,0x66,0x3c,0x00, // 6A j
    0x00,0x00,0xe0,0x60,0x60,0x66,0x66,0x6c,0x78,0x6c,0x66,0x66,0xe6,0x00,0x00,0x00, // 6B k
    0x00,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x3c,0x00,0x00,0x00, // 6C l
    0x00,0x00,0x00,0x00,0x00,0xec,0xfe,0xd6,0xd6,0xd6,0xc6,0xc6,0xc6,0x00,0x00,0x00, // 6D m
    0x00,0x00,0x00,0x00,0x00,0xdc,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x00,0x00,0x00, // 6E n
    0x00,0x00,0x00,0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00, // 6F o
    0x00,0x00,0x00,0x00,0x00,0xdc,0x66,0x66,0x66,0x66,0x66,0x66,0x7c,0x60,0xf0,0x00, // 70 p
    0x00,0x00,0x00,0x00,0x00,0x76,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0x7c,0x0c,0x1e,0x00, // 71 q
    0x00,0x00,0x00,0x00,0x00,0xdc,0x76,0x66,0x60,0x60,0x60,0x60,0xf0,0x00,0x00,0x00, // 72 r
    0x00,0x00,0x00,0x00,0x00,0x7c,0xc6,0xc6,0x70,0x1c,0xc6,0xc6,0x7c,0x00,0x00,0x00, // 73 s
    0x00,0x00,0x10,0x30,0x30,0xfc,0x30,0x30,0x30,0x30,0x30,0x36,0x1c,0x00,0x00,0x00, // 74 t
    0x00,0x00,0x00,0x00,0x00,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0x76,0x00,0x00,0x00, // 75 u
    0x00,0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x66,0x66,0x66,0x3c,0x18,0x00,0x00,0x00, // 76 v
    0x00,0x00,0x00,0x00,0x00,0xc6,0xc6,0xc6,0xd6,0xd6,0xfe,0x6c,0x6c,0x00,0x00,0x00, // 77 w
    0x00,0x00,0x00,0x00,0x00,0xc6,0xc6,0x6c,0x38,0x38,0x6c,0xc6,0xc6,0x00,0x00,0x00, // 78 x
    0x00,0x00,0x00,0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7e,0x06,0x0c,0xf8,0x00, // 79 y
    0x00,0x00,0x00,0x00,0x00,0xfe,0xc6,0xcc,0x18,0x30,0x66,0xc6,0xfe,0x00,0x00,0x00, // 7A z
    0x00,0x0e,0x18,0x18,0x18,0x18,0x18,0x70,0x70,0x18,0x18,0x18,0x18,0x18,0x0e,0x00, // 7B {
    0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x00,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00, // 7C |
    0x00,0x70,0x18,0x18,0x18,0x18,0x18,0x0e,0x0e,0x18,0x18,0x18,0x18,0x18,0x70,0x00, // 7D }
    0x00,0x00,0x76,0xdc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 7E ~
    0x00,0x00,0x00,0x00,0x10,0x38,0x6c,0xc6,0xc6,0xc6,0xc6,0xfe,0x00,0x00,0x00,0x00, // 7F
    0x00,0x00,0x10,0x38,0x6c,0xc6,0xc6,0xc6,0xfe,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00, // 80
    0x00,0x00,0xfe,0x66,0x62,0x60,0x7c,0x66,0x66,0x66,0x66,0x66,0xfc,0x00,0x00,0x00, // 81
    0x00,0x00,0xfc,0x66,0x66,0x66,0x7c,0x66,0x66,0x66,0x66,0x66,0xfc,0x00,0x00,0x00, // 82
    0x00,0x00,0xfe,0x66,0x62,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0xf0,0x00,0x00,0x00, // 83
    0x00,0x00,0x3e,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0xff,0xc3,0xc3,0x00, // 84
    0x00,0x00,0xfe,0x66,0x66,0x62,0x68,0x78,0x68,0x62,0x66,0x66,0xfe,0x00,0x00,0x00, // 85
    0x00,0x00,0xd6,0xd6,0xd6,0x7c,0x38,0x7c,0xd6,0xd6,0xd6,0xd6,0xd6,0x00,0x00,0x00, // 86
    0x00,0x00,0x7c,0xc6,0x06,0x06,0x06,0x3c,0x06,0x06,0x06,0xc6,0x7c,0x00,0x00,0x00, // 87
    0x00,0x00,0xc6,0xc6,0xce,0xde,0xfe,0xf6,0xe6,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00, // 88
    0x38,0x38,0xc6,0xc6,0xce,0xde,0xfe,0xf6,0xe6,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00, // 89
    0x00,0x00,0xe6,0x66,0x6c,0x6c,0x78,0x6c,0x6c,0x66,0x66,0x66,0xe6,0x00,0x00,0x00, // 8A
    0x00,0x00,0x3e,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0xe6,0x00,0x00,0x00, // 8B
    0x00,0x00,0xc6,0xee,0xfe,0xfe,0xd6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00, // 8C
    0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xfe,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00, // 8D
    0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00, // 8E
    0x00,0x00,0xfe,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00, // 8F
    0x00,0x00,0xfc,0x66,0x66,0x66,0x66,0x66,0x7c,0x60,0x60,0x60,0xf0,0x00,0x00,0x00, // 90
    0x00,0x00,0x7c,0xc6,0xc6,0xc0,0xc0,0xc0,0xc0,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00, // 91
    0x00,0x00,0x7e,0x7e,0x5a,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x3c,0x00,0x00,0x00, // 92
    0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0x7e,0x06,0x06,0x06,0xc6,0x7c,0x00,0x00,0x00, // 93
    0x00,0x00,0x18,0x7e,0xdb,0xdb,0xdb,0xdb,0xdb,0xdb,0xdb,0x7e,0x18,0x00,0x00,0x00, // 94
    0x00,0x00,0xc6,0xc6,0xc6,0x6c,0x38,0x38,0x38,0x6c,0xc6,0xc6,0xc6,0x00,0x00,0x00, // 95
    0x00,0x00,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xfe,0x06,0x06,0x00, // 96
    0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7e,0x06,0x06,0x06,0x06,0x00,0x00,0x00, // 97
    0x00,0x00,0xd6,0xd6,0xd6,0xd6,0xd6,0xd6,0xd6,0xd6,0xd6,0xd6,0xfe,0x00,0x00,0x00, // 98
    0x00,0x00,0xd6,0xd6,0xd6,0xd6,0xd6,0xd6,0xd6,0xd6,0xd6,0xd6,0xfe,0x03,0x03,0x00, // 99
    0x00,0x00,0xf8,0xf0,0xb0,0x30,0x3c,0x36,0x36,0x36,0x36,0x36,0x7c,0x00,0x00,0x00, // 9A
    0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xf6,0xde,0xde,0xde,0xde,0xde,0xf6,0x00,0x00,0x00, // 9B
    0x00,0x00,0xf0,0x60,0x60,0x60,0x7c,0x66,0x66,0x66,0x66,0x66,0xfc,0x00,0x00,0x00, // 9C
    0x00,0x00,0x78,0xcc,0x86,0x86,0x26,0x3e,0x26,0x86,0x86,0xcc,0x78,0x00,0x00,0x00, // 9D
    0x00,0x00,0x9c,0xb6,0xb6,0xb6,0xb6,0xf6,0xb6,0xb6,0xb6,0xb6,0x9c,0x00,0x00,0x00, // 9E
    0x00,0x00,0x7e,0xcc,0xcc,0xcc,0xcc,0x7c,0x6c,0xcc,0xcc,0xce,0xce,0x00,0x00,0x00, // 9F
    0x00,0x00,0x00,0x00,0x00,0x78,0xcc,0x0c,0x7c,0xcc,0xcc,0xcc,0x76,0x00,0x00,0x00, // A0
    0x00,0x00,0x00,0x1c,0x30,0x60,0x7c,0x66,0x66,0x66,0x66,0x66,0x3c,0x00,0x00,0x00, // A1
    0x00,0x00,0x00,0x00,0x00,0xfc,0x66,0x66,0x7c,0x66,0x66,0x66,0xfc,0x00,0x00,0x00, // A2
    0x00,0x00,0x00,0x00,0x00,0xfe,0x62,0x60,0x60,0x60,0x60,0x60,0xf0,0x00,0x00,0x00, // A3
    0x00,0x00,0x00,0x00,0x00,0x3e,0x66,0x66,0x66,0x66,0x66,0x66,0xff,0xc3,0xc3,0x00, // A4
    0x00,0x00,0x00,0x00,0x00,0x7c,0xc6,0xc6,0xfe,0xc0,0xc0,0xc6,0x7c,0x00,0x00,0x00, // A5
    0x00,0x00,0x00,0x00,0x00,0xd6,0xd6,0xd6,0x7c,0x7c,0xd6,0xd6,0xd6,0x00,0x00,0x00, // A6
    0x00,0x00,0x00,0x00,0x00,0x3c,0x66,0x66,0x0c,0x06,0x66,0x66,0x3c,0x00,0x00,0x00, // A7
    0x00,0x00,0x00,0x00,0x00,0xc6,0xce,0xde,0xfe,0xf6,0xe6,0xc6,0xc6,0x00,0x00,0x00, // A8
    0x00,0x00,0x38,0x38,0x00,0xc6,0xce,0xde,0xfe,0xf6,0xe6,0xc6,0xc6,0x00,0x00,0x00, // A9
    0x00,0x00,0x00,0x00,0x00,0xe6,0x66,0x6c,0x78,0x6c,0x66,0x66,0xe6,0x00,0x00,0x00, // AA
    0x00,0x00,0x00,0x00,0x00,0x3e,0x66,0x66,0x66,0x66,0x66,0x66,0xe6,0x00,0x00,0x00, // AB
    0x00,0x00,0x00,0x00,0x00,0xc6,0xee,0xfe,0xfe,0xd6,0xc6,0xc6,0xc6,0x00,0x00,0x00, // AC
    0x00,0x00,0x00,0x00,0x00,0xc6,0xc6,0xc6,0xfe,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00, // AD
    0x00,0x00,0x00,0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00, // AE
    0x00,0x00,0x00,0x00,0x00,0xfe,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00, // AF
    0x44,0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,0x11, // B0
    0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55, // B1
    0x77,0xdd,0x77,0xdd,0x77,0xdd,0x77,0xdd,0x77,0xdd,0x77,0xdd,0x77,0xdd,0x77,0xdd, // B2
    0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18, // B3
    0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xf8,0x18,0x18,0x18,0x18,0x18,0x18,0x18, // B4
    0x18,0x18,0x18,0x18,0x18,0x18,0xf8,0x18,0xf8,0x18,0x18,0x18,0x18,0x18,0x18,0x18, // B5
    0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xf6,0x36,0x36,0x36,0x36,0x36,0x36,0x36, // B6
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x36,0x36,0x36,0x36,0x36,0x36,0x36, // B7
    0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x18,0xf8,0x18,0x18,0x18,0x18,0x18,0x18,0x18, // B8
    0x36,0x36,0x36,0x36,0x36,0x36,0xf6,0x06,0xf6,0x36,0x36,0x36,0x36,0x36,0x36,0x36, // B9
    0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36, // BA
    0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x06,0xf6,0x36,0x36,0x36,0x36,0x36,0x36,0x36, // BB
    0x36,0x36,0x36,0x36,0x36,0x36,0xf6,0x06,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // BC
    0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // BD
    0x18,0x18,0x18,0x18,0x18,0x18,0xf8,0x18,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // BE
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x18,0x18,0x18,0x18,0x18,0x18,0x18, // BF
    0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // C0
    0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // C1
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x18,0x18,0x18,0x18,0x18,0x18,0x18, // C2
    0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x1f,0x18,0x18,0x18,0x18,0x18,0x18,0x18, // C3
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // C4
    0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xff,0x18,0x18,0x18,0x18,0x18,0x18,0x18, // C5
    0x18,0x18,0x18,0x18,0x18,0x18,0x1f,0x18,0x1f,0x18,0x18,0x18,0x18,0x18,0x18,0x18, // C6
    0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x37,0x36,0x36,0x36,0x36,0x36,0x36,0x36, // C7
    0x36,0x36,0x36,0x36,0x36,0x36,0x37,0x30,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // C8
    0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x30,0x37,0x36,0x36,0x36,0x36,0x36,0x36,0x36, // C9
    0x36,0x36,0x36,0x36,0x36,0x36,0xf7,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // CA
    0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0xf7,0x36,0x36,0x36,0x36,0x36,0x36,0x36, // CB
    0x36,0x36,0x36,0x36,0x36,0x36,0x37,0x30,0x37,0x36,0x36,0x36,0x36,0x36,0x36,0x36, // CC
    0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // CD
    0x36,0x36,0x36,0x36,0x36,0x36,0xf7,0x00,0xf7,0x36,0x36,0x36,0x36,0x36,0x36,0x36, // CE
    0x18,0x18,0x18,0x18,0x18,0x18,0xff,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // CF
    0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // D0
    0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0xff,0x18,0x18,0x18,0x18,0x18,0x18,0x18, // D1
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x36,0x36,0x36,0x36,0x36,0x36,0x36, // D2
    0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // D3
    0x18,0x18,0x18,0x18,0x18,0x18,0x1f,0x18,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // D4
    0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x18,0x1f,0x18,0x18,0x18,0x18,0x18,0x18,0x18, // D5
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x36,0x36,0x36,0x36,0x36,0x36,0x36, // D6
    0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xff,0x36,0x36,0x36,0x36,0x36,0x36,0x36, // D7
    0x18,0x18,0x18,0x18,0x18,0x18,0xff,0x18,0xff,0x18,0x18,0x18,0x18,0x18,0x18,0x18, // D8
    0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // D9
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x18,0x18,0x18,0x18,0x18,0x18,0x18, // DA
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // DB
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // DC
    0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0, // DD
    0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f, // DE
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // DF
    0x00,0x00,0x00,0x00,0x00,0xdc,0x66,0x66,0x66,0x66,0x66,0x7c,0x60,0x60,0xf0,0x00, // E0
    0x00,0x00,0x00,0x00,0x00,0x7c,0xc6,0xc6,0xc0,0xc0,0xc6,0xc6,0x7c,0x00,0x00,0x00, // E1
    0x00,0x00,0x00,0x00,0x00,0x7e,0x5a,0x18,0x18,0x18,0x18,0x18,0x3c,0x00,0x00,0x00, // E2
    0x00,0x00,0x00,0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7e,0x06,0x0c,0xf8,0x00, // E3
    0x00,0x00,0x00,0x00,0x00,0x18,0x7e,0xdb,0xdb,0xdb,0xdb,0xdb,0x7e,0x18,0x18,0x00, // E4
    0x00,0x00,0x00,0x00,0x00,0xc6,0xc6,0x6c,0x38,0x38,0x6c,0xc6,0xc6,0x00,0x00,0x00, // E5
    0x00,0x00,0x00,0x00,0x00,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xfe,0x06,0x06,0x00, // E6
    0x00,0x00,0x00,0x00,0x00,0xc6,0xc6,0xc6,0xc6,0x7e,0x06,0x06,0x06,0x00,0x00,0x00, // E7
    0x00,0x00,0x00,0x00,0x00,0xd6,0xd6,0xd6,0xd6,0xd6,0xd6,0xd6,0xfe,0x00,0x00,0x00, // E8
    0x00,0x00,0x00,0x00,0x00,0xd6,0xd6,0xd6,0xd6,0xd6,0xd6,0xd6,0xfe,0x03,0x03,0x00, // E9
    0x00,0x00,0x00,0x00,0x00,0xf8,0xb0,0x3c,0x36,0x36,0x36,0x36,0x7c,0x00,0x00,0x00, // EA
    0x00,0x00,0x00,0x00,0x00,0xc6,0xc6,0xf6,0xde,0xde,0xde,0xde,0xf6,0x00,0x00,0x00, // EB
    0x00,0x00,0x00,0x00,0x00,0xf0,0x60,0x60,0x7c,0x66,0x66,0x66,0xfc,0x00,0x00,0x00, // EC
    0x00,0x00,0x00,0x00,0x00,0x3c,0x66,0x06,0x1e,0x06,0x66,0x66,0x3c,0x00,0x00,0x00, // ED
    0x00,0x00,0x00,0x00,0x00,0x9c,0xb6,0xb6,0xf6,0xb6,0xb6,0xb6,0x9c,0x00,0x00,0x00, // EE
    0x00,0x00,0x00,0x00,0x00,0x7e,0xcc,0xcc,0xcc,0x7c,0x6c,0xcc,0xce,0x00,0x00,0x00, // EF
    0x00,0x00,0x00,0x00,0xfe,0x00,0x00,0xfe,0x00,0x00,0xfe,0x00,0x00,0x00,0x00,0x00, // F0
    0x00,0x00,0x00,0x00,0x18,0x18,0x7e,0x18,0x18,0x00,0x00,0xff,0x00,0x00,0x00,0x00, // F1
    0x00,0x00,0x00,0x30,0x18,0x0c,0x06,0x0c,0x18,0x30,0x00,0x7e,0x00,0x00,0x00,0x00, // F2
    0x00,0x00,0x00,0x0c,0x18,0x30,0x60,0x30,0x18,0x0c,0x00,0x7e,0x00,0x00,0x00,0x00, // F3
    0x00,0x00,0x00,0x0e,0x1b,0x1b,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18, // F4
    0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xd8,0xd8,0x70,0x00,0x00,0x00,0x00, // F5
    0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x7e,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00, // F6
    0x00,0x00,0x00,0x00,0x00,0x76,0xdc,0x00,0x76,0xdc,0x00,0x00,0x00,0x00,0x00,0x00, // F7
    0x00,0x38,0x6c,0x6c,0x6c,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // F8
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // F9
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // FA
    0x00,0x0f,0x0c,0x0c,0x0c,0x0c,0x0c,0xec,0x6c,0x3c,0x1c,0x0c,0x00,0x00,0x00,0x00, // FB
    0x00,0x00,0xd8,0x6c,0x6c,0x6c,0x6c,0x6c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // FC
    0x00,0x00,0x70,0xd8,0x30,0x60,0xc8,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // FD
    0x00,0x00,0x00,0x00,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x00,0x00,0x00,0x00, // FE
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00  // FF
};

class App {
protected:

    SDL_Window*         sdl_window;
    SDL_Renderer*       sdl_renderer;
    SDL_Texture*        sdl_screen_texture;
    Uint32*             screen_buffer;

    // SYSTEM
    int         pticks = 0, width, height, scale, tstate = 0, tstate_prev = 0;
    FILE*       debug_stream;
    Disassemble* dasm;

    // VGA
    int         x = 0, y = 0, _hs = 1, _vs = 0;
    uint8_t     charmem[4096];
    uint8_t*    memory;
    int         vga_reg_id = 0, kbd_hit = 0, kbd_key = 0;

    // PS2-KEYBOARD
    int         ps_clock = 0, ps_data = 0, kbd_phase = 0, kbd_ticker = 0;
    uint8_t     kbd[256], kbd_top = 0, kb_hit_cnt = 0, kb_latch = 0, kb_data = 0;

    // SD-CARD
    int         sd_data_o, sd_data_i, sd_timeout = 1;
    int         sd_state,  sd_arg,    sd_next_cmd, sd_count;
    uint8_t     sd_sector[512];

    // MODULES
    Vcpu*       mod_cpu;
    Vgpu*       mod_gpu;
    Vkbd*       mod_kbd;

public:

    int debug_enable = 0;

    App(int argc, char* argv[]) {

        if (SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO)) {
            exit(1);
        }

        Verilated::commandArgs(argc, argv);

        int w = 640, h = 400, s = 2;

        width  = w;
        height = h;
        scale  = s;

        screen_buffer = (Uint32*) malloc(w * h * sizeof(Uint32));
        sdl_window    = SDL_CreateWindow("8088 HOMEBREW OWN", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, s*w, s*h, SDL_WINDOW_SHOWN);
        sdl_renderer  = SDL_CreateRenderer(sdl_window, -1, SDL_RENDERER_PRESENTVSYNC);
        sdl_screen_texture = SDL_CreateTexture(sdl_renderer, SDL_PIXELFORMAT_BGRA32, SDL_TEXTUREACCESS_STREAMING, w, h);
        SDL_SetTextureBlendMode(sdl_screen_texture, SDL_BLENDMODE_NONE);

        // Создать модули
        mod_gpu = new Vgpu;
        mod_cpu = new Vcpu;
        mod_kbd = new Vkbd;

        memory = (uint8_t*) malloc(1024*1024);

        // Сброс процессора
        mod_cpu->reset_n = 0;
        mod_cpu->ce      = 1;
        mod_cpu->clock   = 0; mod_cpu->eval();
        mod_cpu->clock   = 1; mod_cpu->eval();
        mod_cpu->reset_n = 1;

        // Загрузка BIOS 4K
        for (int i = 1; i < argc; i++) {

            FILE* fp = fopen(argv[i], "rb");
            if (fp) {
                fread(memory + 0xFF000, 1, 4096, fp);
                fclose(fp);
            }
        }

        // Заполнение видеопамяти знаками
        for (int i = 0; i < 4000; i += 2) {
            charmem[i+0] = '$';
            charmem[i+1] = 0x17;
        }

        dasm = new Disassemble(memory);

        debug_enable = 0;
        debug_stream = NULL;

        sd_timeout   = 1;
    }

    // Обработка одного такта
    void tick() {

        uint32_t A   = mod_cpu->address;
        uint8_t  out = mod_cpu->out;

        // Обработка клавиатуры
        // ---------------------------------------------------------------------

        kbd_pop(ps_clock, ps_data);

        mod_kbd->ps_clock = ps_clock;
        mod_kbd->ps_data  = ps_data;

        // Пришли данные с клавиатуры
        if (mod_kbd->done) {
            kbd_hit |= 1;
            kbd_key  = mod_kbd->data;
        }

        // ---------------------------------------------------------------------

        // Запись в память
        if (mod_cpu->we) {

            memory[A] = out;
            if (A >= 0xB8000 && A <= 0xB8FFF) charmem[A - 0xB8000] = out;
        }

        mod_cpu->in = memory[A];

        // FWAIT инструкция
        // ---------------------------------------------------------------------

        if (mod_cpu->in == 0x9B && mod_cpu->m0) {
            if (debug_enable == 0) {
                debug_enable = 1;
                debug_stream = fopen("debug.txt", "w");
            }
        }

        if (debug_enable && mod_cpu->m0) {

            dasm->disassemble(A);
            fprintf(debug_stream, "+%d [%05X] ", tstate - tstate_prev, A);
            dasm->output(debug_stream);
            fputs("\n", debug_stream);
            tstate_prev = tstate;
        }

        tstate++;

        // ------------------------------------------------------

        // Запись в порт
        if (mod_cpu->pw) {

            switch (mod_cpu->pa) {

                case 0x3D4: vga_reg_id = out; break;
                case 0x3D5:

                    switch (vga_reg_id) {

                        // Позиция курсора через порты VGA
                        case 0x0E: mod_gpu->cursor = (mod_gpu->cursor & 0xF0FF) | (out & 15)*256; break;
                        case 0x0F: mod_gpu->cursor = (mod_gpu->cursor & 0xFF00) | (out); break;
                    }

                    break;
            }
        }

        // Чтение из порта
        if (mod_cpu->pr) {

            switch (mod_cpu->pa) {

                // Читать данные с клавиатуры
                case 0x060: mod_cpu->pin = kbd_key; break;
                case 0x064: mod_cpu->pin = kbd_hit; kbd_hit &= ~1; break;
                default:    mod_cpu->pin = 0xFF; break;
            }
        }

        // Реализация видеоадаптера
        // ------------------------------------------------------
        mod_gpu->char_data = charmem[mod_gpu->char_address];
        mod_gpu->font_data = font   [mod_gpu->font_address];

        // ------------------------------------------------------

        // Такт на процессор
        mod_cpu->clock = 0; mod_cpu->eval();
        mod_cpu->clock = 1; mod_cpu->eval();

        // Такт на видеопроцессор
        mod_gpu->clock = 0; mod_gpu->eval();
        mod_gpu->clock = 1; mod_gpu->eval();

        // Такт на клавиатуру
        mod_kbd->clock = 0; mod_kbd->eval();
        mod_kbd->clock = 1; mod_kbd->eval();

        // Вывод на экран
        vga(mod_gpu->hs, mod_gpu->vs, (mod_gpu->r*16)*65536 + (mod_gpu->g*16)*256 + (mod_gpu->b*16));
    }

    // Ожидание событий
    int main() {

        SDL_Event evt;

        for (;;) {

            Uint32 ticks = SDL_GetTicks();

            // Обработать все новые события
            while (SDL_PollEvent(& evt)) {

                switch (evt.type) {

                    case SDL_QUIT:

                        return 0;

                    case SDL_KEYDOWN:

                        kbd_scancode(evt.key.keysym.scancode, 0);
                        break;

                    case SDL_KEYUP:

                        kbd_scancode(evt.key.keysym.scancode, 1);
                        break;
                }
            }

            // Истечение таймаута: обновление экрана
            if (ticks - pticks >= 40) {

                pticks = ticks;
                update();
                return 1;
            }

            SDL_Delay(1);
        }
    }

    // Сканирование нажатой клавиши
    // https://ru.wikipedia.org/wiki/Скан-код
    void kbd_scancode(int scancode, int release) {

        switch (scancode) {

            // Коды клавиш A-Z
            case SDL_SCANCODE_A: if (release) kbd_push(0xF0); kbd_push(0x1C); break;
            case SDL_SCANCODE_B: if (release) kbd_push(0xF0); kbd_push(0x32); break;
            case SDL_SCANCODE_C: if (release) kbd_push(0xF0); kbd_push(0x21); break;
            case SDL_SCANCODE_D: if (release) kbd_push(0xF0); kbd_push(0x23); break;
            case SDL_SCANCODE_E: if (release) kbd_push(0xF0); kbd_push(0x24); break;
            case SDL_SCANCODE_F: if (release) kbd_push(0xF0); kbd_push(0x2B); break;
            case SDL_SCANCODE_G: if (release) kbd_push(0xF0); kbd_push(0x34); break;
            case SDL_SCANCODE_H: if (release) kbd_push(0xF0); kbd_push(0x33); break;
            case SDL_SCANCODE_I: if (release) kbd_push(0xF0); kbd_push(0x43); break;
            case SDL_SCANCODE_J: if (release) kbd_push(0xF0); kbd_push(0x3B); break;
            case SDL_SCANCODE_K: if (release) kbd_push(0xF0); kbd_push(0x42); break;
            case SDL_SCANCODE_L: if (release) kbd_push(0xF0); kbd_push(0x4B); break;
            case SDL_SCANCODE_M: if (release) kbd_push(0xF0); kbd_push(0x3A); break;
            case SDL_SCANCODE_N: if (release) kbd_push(0xF0); kbd_push(0x31); break;
            case SDL_SCANCODE_O: if (release) kbd_push(0xF0); kbd_push(0x44); break;
            case SDL_SCANCODE_P: if (release) kbd_push(0xF0); kbd_push(0x4D); break;
            case SDL_SCANCODE_Q: if (release) kbd_push(0xF0); kbd_push(0x15); break;
            case SDL_SCANCODE_R: if (release) kbd_push(0xF0); kbd_push(0x2D); break;
            case SDL_SCANCODE_S: if (release) kbd_push(0xF0); kbd_push(0x1B); break;
            case SDL_SCANCODE_T: if (release) kbd_push(0xF0); kbd_push(0x2C); break;
            case SDL_SCANCODE_U: if (release) kbd_push(0xF0); kbd_push(0x3C); break;
            case SDL_SCANCODE_V: if (release) kbd_push(0xF0); kbd_push(0x2A); break;
            case SDL_SCANCODE_W: if (release) kbd_push(0xF0); kbd_push(0x1D); break;
            case SDL_SCANCODE_X: if (release) kbd_push(0xF0); kbd_push(0x22); break;
            case SDL_SCANCODE_Y: if (release) kbd_push(0xF0); kbd_push(0x35); break;
            case SDL_SCANCODE_Z: if (release) kbd_push(0xF0); kbd_push(0x1A); break;

            // Цифры
            case SDL_SCANCODE_0: if (release) kbd_push(0xF0); kbd_push(0x45); break;
            case SDL_SCANCODE_1: if (release) kbd_push(0xF0); kbd_push(0x16); break;
            case SDL_SCANCODE_2: if (release) kbd_push(0xF0); kbd_push(0x1E); break;
            case SDL_SCANCODE_3: if (release) kbd_push(0xF0); kbd_push(0x26); break;
            case SDL_SCANCODE_4: if (release) kbd_push(0xF0); kbd_push(0x25); break;
            case SDL_SCANCODE_5: if (release) kbd_push(0xF0); kbd_push(0x2E); break;
            case SDL_SCANCODE_6: if (release) kbd_push(0xF0); kbd_push(0x36); break;
            case SDL_SCANCODE_7: if (release) kbd_push(0xF0); kbd_push(0x3D); break;
            case SDL_SCANCODE_8: if (release) kbd_push(0xF0); kbd_push(0x3E); break;
            case SDL_SCANCODE_9: if (release) kbd_push(0xF0); kbd_push(0x46); break;

            // Keypad
            case SDL_SCANCODE_KP_0: if (release) kbd_push(0xF0); kbd_push(0x70); break;
            case SDL_SCANCODE_KP_1: if (release) kbd_push(0xF0); kbd_push(0x69); break;
            case SDL_SCANCODE_KP_2: if (release) kbd_push(0xF0); kbd_push(0x72); break;
            case SDL_SCANCODE_KP_3: if (release) kbd_push(0xF0); kbd_push(0x7A); break;
            case SDL_SCANCODE_KP_4: if (release) kbd_push(0xF0); kbd_push(0x6B); break;
            case SDL_SCANCODE_KP_5: if (release) kbd_push(0xF0); kbd_push(0x73); break;
            case SDL_SCANCODE_KP_6: if (release) kbd_push(0xF0); kbd_push(0x74); break;
            case SDL_SCANCODE_KP_7: if (release) kbd_push(0xF0); kbd_push(0x6C); break;
            case SDL_SCANCODE_KP_8: if (release) kbd_push(0xF0); kbd_push(0x75); break;
            case SDL_SCANCODE_KP_9: if (release) kbd_push(0xF0); kbd_push(0x7D); break;

            // Специальные символы
            case SDL_SCANCODE_GRAVE:        if (release) kbd_push(0xF0); kbd_push(0x0E); break;
            case SDL_SCANCODE_MINUS:        if (release) kbd_push(0xF0); kbd_push(0x4E); break;
            case SDL_SCANCODE_EQUALS:       if (release) kbd_push(0xF0); kbd_push(0x55); break;
            case SDL_SCANCODE_BACKSLASH:    if (release) kbd_push(0xF0); kbd_push(0x5D); break;
            case SDL_SCANCODE_LEFTBRACKET:  if (release) kbd_push(0xF0); kbd_push(0x54); break;
            case SDL_SCANCODE_RIGHTBRACKET: if (release) kbd_push(0xF0); kbd_push(0x5B); break;
            case SDL_SCANCODE_SEMICOLON:    if (release) kbd_push(0xF0); kbd_push(0x4C); break;
            case SDL_SCANCODE_APOSTROPHE:   if (release) kbd_push(0xF0); kbd_push(0x52); break;
            case SDL_SCANCODE_COMMA:        if (release) kbd_push(0xF0); kbd_push(0x41); break;
            case SDL_SCANCODE_PERIOD:       if (release) kbd_push(0xF0); kbd_push(0x49); break;
            case SDL_SCANCODE_SLASH:        if (release) kbd_push(0xF0); kbd_push(0x4A); break;
            case SDL_SCANCODE_BACKSPACE:    if (release) kbd_push(0xF0); kbd_push(0x66); break;
            case SDL_SCANCODE_SPACE:        if (release) kbd_push(0xF0); kbd_push(0x29); break;
            case SDL_SCANCODE_TAB:          if (release) kbd_push(0xF0); kbd_push(0x0D); break;
            case SDL_SCANCODE_CAPSLOCK:     if (release) kbd_push(0xF0); kbd_push(0x58); break;
            case SDL_SCANCODE_LSHIFT:       if (release) kbd_push(0xF0); kbd_push(0x12); break;
            case SDL_SCANCODE_LCTRL:        if (release) kbd_push(0xF0); kbd_push(0x14); break;
            case SDL_SCANCODE_LALT:         if (release) kbd_push(0xF0); kbd_push(0x11); break;
            case SDL_SCANCODE_RSHIFT:       if (release) kbd_push(0xF0); kbd_push(0x59); break;
            case SDL_SCANCODE_RETURN:       if (release) kbd_push(0xF0); kbd_push(0x5A); break;
            case SDL_SCANCODE_ESCAPE:       if (release) kbd_push(0xF0); kbd_push(0x76); break;
            case SDL_SCANCODE_NUMLOCKCLEAR: if (release) kbd_push(0xF0); kbd_push(0x77); break;
            case SDL_SCANCODE_KP_MULTIPLY:  if (release) kbd_push(0xF0); kbd_push(0x7C); break;
            case SDL_SCANCODE_KP_MINUS:     if (release) kbd_push(0xF0); kbd_push(0x7B); break;
            case SDL_SCANCODE_KP_PLUS:      if (release) kbd_push(0xF0); kbd_push(0x79); break;
            case SDL_SCANCODE_KP_PERIOD:    if (release) kbd_push(0xF0); kbd_push(0x71); break;
            case SDL_SCANCODE_SCROLLLOCK:   if (release) kbd_push(0xF0); kbd_push(0x7E); break;

            // F1-F12 Клавиши
            case SDL_SCANCODE_F1:   if (release) kbd_push(0xF0); kbd_push(0x05); break;
            case SDL_SCANCODE_F2:   if (release) kbd_push(0xF0); kbd_push(0x06); break;
            case SDL_SCANCODE_F3:   if (release) kbd_push(0xF0); kbd_push(0x04); break;
            case SDL_SCANCODE_F4:   if (release) kbd_push(0xF0); kbd_push(0x0C); break;
            case SDL_SCANCODE_F5:   if (release) kbd_push(0xF0); kbd_push(0x03); break;
            case SDL_SCANCODE_F6:   if (release) kbd_push(0xF0); kbd_push(0x0B); break;
            case SDL_SCANCODE_F7:   if (release) kbd_push(0xF0); kbd_push(0x83); break;
            case SDL_SCANCODE_F8:   if (release) kbd_push(0xF0); kbd_push(0x0A); break;
            case SDL_SCANCODE_F9:   if (release) kbd_push(0xF0); kbd_push(0x01); break;
            case SDL_SCANCODE_F10:  if (release) kbd_push(0xF0); kbd_push(0x09); break;
            case SDL_SCANCODE_F11:  if (release) kbd_push(0xF0); kbd_push(0x78); break;
            case SDL_SCANCODE_F12:  if (release) kbd_push(0xF0); kbd_push(0x07); break;

            // Расширенные клавиши
            case SDL_SCANCODE_LGUI:         kbd_push(0xE0); if (release) kbd_push(0xF0); kbd_push(0x1F); break;
            case SDL_SCANCODE_RGUI:         kbd_push(0xE0); if (release) kbd_push(0xF0); kbd_push(0x27); break;
            case SDL_SCANCODE_APPLICATION:  kbd_push(0xE0); if (release) kbd_push(0xF0); kbd_push(0x2F); break;
            case SDL_SCANCODE_RCTRL:        kbd_push(0xE0); if (release) kbd_push(0xF0); kbd_push(0x14); break;
            case SDL_SCANCODE_RALT:         kbd_push(0xE0); if (release) kbd_push(0xF0); kbd_push(0x11); break;
            case SDL_SCANCODE_KP_DIVIDE:    kbd_push(0xE0); if (release) kbd_push(0xF0); kbd_push(0x4A); break;
            case SDL_SCANCODE_KP_ENTER:     kbd_push(0xE0); if (release) kbd_push(0xF0); kbd_push(0x5A); break;

            case SDL_SCANCODE_INSERT:       kbd_push(0xE0); if (release) kbd_push(0xF0); kbd_push(0x70); break;
            case SDL_SCANCODE_HOME:         kbd_push(0xE0); if (release) kbd_push(0xF0); kbd_push(0x6C); break;
            case SDL_SCANCODE_END:          kbd_push(0xE0); if (release) kbd_push(0xF0); kbd_push(0x69); break;
            case SDL_SCANCODE_PAGEUP:       kbd_push(0xE0); if (release) kbd_push(0xF0); kbd_push(0x7D); break;
            case SDL_SCANCODE_PAGEDOWN:     kbd_push(0xE0); if (release) kbd_push(0xF0); kbd_push(0x7A); break;
            case SDL_SCANCODE_DELETE:       kbd_push(0xE0); if (release) kbd_push(0xF0); kbd_push(0x71); break;

            case SDL_SCANCODE_UP:           kbd_push(0xE0); if (release) kbd_push(0xF0); kbd_push(0x75); break;
            case SDL_SCANCODE_DOWN:         kbd_push(0xE0); if (release) kbd_push(0xF0); kbd_push(0x72); break;
            case SDL_SCANCODE_LEFT:         kbd_push(0xE0); if (release) kbd_push(0xF0); kbd_push(0x6B); break;
            case SDL_SCANCODE_RIGHT:        kbd_push(0xE0); if (release) kbd_push(0xF0); kbd_push(0x74); break;

            // Клавиша PrnScr
            case SDL_SCANCODE_PRINTSCREEN: {

                if (release == 0) {

                    kbd_push(0xE0); kbd_push(0x12);
                    kbd_push(0xE0); kbd_push(0x7C);

                } else {

                    kbd_push(0xE0); kbd_push(0xF0); kbd_push(0x7C);
                    kbd_push(0xE0); kbd_push(0xF0); kbd_push(0x12);
                }

                break;
            }

            // Клавиша Pause
            case SDL_SCANCODE_PAUSE: {

                kbd_push(0xE1);
                kbd_push(0x14); if (release) kbd_push(0xF0); kbd_push(0x77);
                kbd_push(0x14); if (release) kbd_push(0xF0); kbd_push(0x77);
                break;
            }
        }
    }

    // Нажатие на клавишу
    void kbd_push(int data) {

        if (kbd_top >= 255) return;
        kbd[kbd_top] = data;
        kbd_top++;
    }

    // Извлечение PS/2
    void kbd_pop(int& ps_clock, int& ps_data) {

        // В очереди нет клавиш для нажатия
        if (kbd_top == 0) return;

        // 25000000/2000 = 12.5 kHz Очередной полутакт для PS/2
        if (++kbd_ticker >= 2000) {

            ps_clock = kbd_phase & 1;

            switch (kbd_phase) {

                // Старт-бит [=0]
                case 0: case 1: ps_data = 0; break;

                // Бит четности
                case 18: case 19:

                    ps_data = 1;
                    for (int i = 0; i < 8; i++)
                        ps_data ^= !!(kbd[0] & (1 << i));

                    break;

                // Стоп-бит [=1]
                case 20: case 21: ps_data = 1; break;

                // Небольшая задержка между нажатиями клавиш
                case 22: case 23:
                case 24: case 25:

                    ps_clock = 1;
                    ps_data  = 1;
                    break;

                // Завершение
                case 26:

                    // Удалить символ из буфера
                    for (int i = 0; i < kbd_top - 1; i++)
                        kbd[i] = kbd[i+1];

                    kbd_top--;
                    kbd_phase = -1;
                    ps_clock  = 1;
                    break;

                // Отсчет битов от 0 до 7
                // 0=2,3   | 1=4,5   | 2=6,7   | 3=8,9
                // 4=10,11 | 5=12,13 | 6=14,15 | 7=16,17
                default:

                    ps_data = !!(kbd[0] & (1 << ((kbd_phase >> 1) - 1)));
                    break;
            }

            kbd_ticker = 0;
            kbd_phase++;
        }
    }

    // Обновить экран
    void update() {

        SDL_Rect dstRect;

        dstRect.x = 0;
        dstRect.y = 0;
        dstRect.w = scale * width;
        dstRect.h = scale * height;

        SDL_UpdateTexture       (sdl_screen_texture, NULL, screen_buffer, width * sizeof(Uint32));
        SDL_SetRenderDrawColor  (sdl_renderer, 0, 0, 0, 0);
        SDL_RenderClear         (sdl_renderer);
        SDL_RenderCopy          (sdl_renderer, sdl_screen_texture, NULL, &dstRect);
        SDL_RenderPresent       (sdl_renderer);
    }

    // Очистка экрана в определенный цвет
    void cls(uint32_t color = 0) {

        for (int x = 0; x < height * width; x++)
            screen_buffer[x] = color;
    }

    // Установка точки
    void pset(int x, int y, Uint32 color) {

        if (x < 0 || y < 0 || x > width || y >= height)
            return;

        screen_buffer[y*width + x] = color;
    }

    // Чтение точки
    Uint32 point(int x, int y) {

        if (x < 0 || y < 0 || x > width || y >= height)
            return 0;

        return screen_buffer[y*width + x];
    }

    // Удалить окно
    int destroy() {

        free(screen_buffer);
        free(memory);

        if (debug_stream) {
            fclose(debug_stream);
        }

        SDL_DestroyTexture  (sdl_screen_texture);
        SDL_DestroyRenderer (sdl_renderer);
        SDL_DestroyWindow   (sdl_window);
        SDL_Quit();

        return 0;
    }

    // Сохранение фрейма
    void saveframe() {

        FILE* fp = fopen("out/record.ppm", "ab");
        if (fp) {

            fprintf(fp, "P6\n# Verilator\n%d %d\n255\n", width, height);
            for (int y = 0; y < height; y++)
            for (int x = 0; x < width; x++) {

                int cl = screen_buffer[y*width + x];
                int vl = ((cl >> 16) & 255) + (cl & 0xFF00) + ((cl&255)<<16);
                fwrite(&vl, 1, 3, fp);
            }

            fclose(fp);
        }
    }

    // 640 x 400 x 70
    void vga(int hs, int vs, int color) {

        if (hs) x++;

        // Отслеживание изменений HS/VS
        if (_hs == 0 && hs == 1) { x = 0; y++; }
        if (_vs == 1 && vs == 0) { x = 0; y = 0; saveframe(); }

        // Сохранить предыдущее значение
        _hs = hs;
        _vs = vs;

        // Вывод на экран
        pset(x-49, y-35, color);
    }

    // Процессинг SPI
    // 1 READ|WRITE
    // 2 CE=0 Активация чипа
    // 3 CE=1 Деактивация
    void spi_process(int sd_cmd) {

        FILE* fp;

        // Значение по умолчанию
        sd_data_i  = 0xFF;
        sd_timeout = 0;

        // Чтение или запись
        if ((sd_cmd & 3) == 1) {

            switch (sd_state) {

                // IDLE
                case 0: {

                    // Получена команда
                    if ((sd_data_o & 0xC0) == 0x40) {

                        sd_arg   = 0;
                        sd_state = 1;

                        // Инициализация карты
                        if      (sd_data_o == 0x40) sd_next_cmd = 6;
                        else if (sd_data_o == 0x48) sd_next_cmd = 7;
                        else if (sd_data_o == 0x77) sd_next_cmd = 12;
                        else if (sd_data_o == 0x69) sd_next_cmd = 12;
                        else if (sd_data_o == 0x7A) sd_next_cmd = 13;
                        // Чтение с диска
                        else if (sd_data_o == 0x51) sd_next_cmd = 18;
                        else if (sd_data_o == 0x58) sd_next_cmd = 21;
                        else if (sd_data_o == 0x4D) sd_next_cmd = 28;
                    }

                    break;
                }

                // Прием аргумента
                case 1: case 2: case 3: case 4: {

                    sd_arg  = (sd_arg << 8) | sd_data_o;
                    sd_arg &= 0xFFFFFFFF;

                    sd_state++;
                    break;
                }

                // CRC
                case 5: sd_state = sd_next_cmd; break;

                // --------- ИСПОЛНЕНИЕ КОМАНД ---------

                // CMD0
                case 6: sd_data_i = 0x01; sd_state = 0; break;   // Ответ 01

                // CMD48
                case 7:  sd_data_i = 0x00; sd_state = 8;  break; // Ответ 00
                case 8:  sd_data_i = 0x00; sd_state = 9;  break;
                case 9:  sd_data_i = 0x00; sd_state = 10; break;
                case 10: sd_data_i = 0x01; sd_state = 11; break;
                case 11: sd_data_i = 0xAA; sd_state = 0; break;

                // ACMD55, CMD41
                case 12: sd_data_i = 0x00; sd_state = 0; break;  // Ответ 00

                // CMD58
                case 13: sd_data_i = 0x00; sd_state = 14; break; // Ответ 00
                case 14: sd_data_i = 0xC0; sd_state = 15; break;
                case 15: sd_data_i = 0x00; sd_state = 16; break;
                case 16: sd_data_i = 0x00; sd_state = 17; break;
                case 17: sd_data_i = 0x00; sd_state = 0;  break;

                // CMD17: READ
                case 18: sd_data_i = 0x00; sd_state = 19; break; // Ответ 00
                case 19: {

                    // Ответ FE
                    sd_data_i = 0xFE;
                    sd_state  = 20;
                    sd_count  = 0;

                    fp = fopen("sd.img", "rb+");
                    if (fp) {

                        fseek(fp, 512*sd_arg, SEEK_SET);
                        fread(sd_sector, 1, 512, fp);
                        fclose(fp);
                    }

                    break;
                }

                // Чтение с карты
                case 20: {

                    sd_data_i = sd_sector[sd_count];
                    sd_count++;

                    if (sd_count == 512) sd_state = 0;
                    break;
                }

                // CMD24: WRITE
                case 21: sd_data_i = 0x00; sd_state = 22; break; // Ответ 00
                case 22: sd_data_i = 0xFE; sd_state = 23; sd_count = 0; break;
                case 23: {

                    sd_sector[sd_count] = sd_data_o;
                    sd_count++;

                    if (sd_count == 512) {

                        fp = fopen("sd.img", "rb+");

                        if (fp) {

                            fseek(fp, 512*sd_arg, SEEK_SET);
                            fwrite(sd_sector, 1, 512, fp);
                            fclose(fp);
                        }

                        sd_state = 24;
                    }

                    break;
                }

                // CRC
                case 24: sd_data_i = 0x00; sd_state = 25; break; // CRCL
                case 25: sd_data_i = 0x00; sd_state = 26; break; // CRCH
                case 26: sd_data_i = 0x05; sd_state = 27; break; // 05
                case 27: sd_data_i = 0xFF; sd_state = 0; break;  // Status

                // CMD13: Должен быть ответ 2 нуля
                case 28: sd_data_i = 0x00; sd_state = 29; break; // Ответ 00
                case 29: sd_data_i = 0x00; sd_state = 0;  break; // Ответ 00
            }
        }
        // CE=1
        else if ((sd_cmd & 3) == 3)  {
            sd_state = 0;
        }
    }
};
